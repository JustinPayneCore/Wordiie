@page "/"

<div class="text-center" tabindex="0" @ref="docRef" @onkeydown=" KeyboardEventHandler ">
    <h1 class="display-4">WordIe</h1>
    <p id="guessResult">@guessResult</p>

    @foreach (var item in attemptedGuesses)
    {
        @item
        <br />
    }

    <div>
        <span id="TextInputGuess" type="text"> @guess </span>
    </div>

    @*<div>
            <p id="Attempt2">_____</p>
            <p id="Attempt3">_____</p>
            <p id="Attempt4">_____</p>
            <p id="Attempt5">_____</p>
            <p id="Attempt6">_____</p>
        </div>*@

    <div>
        <span id="TextGuess0Char0" type="text"> @g0c0 </span>
        <span id="TextGuess0Char1" type="text"> @g0c1 </span>
        <span id="TextGuess0Char2" type="text"> @g0c2 </span>
        <span id="TextGuess0Char3" type="text"> @g0c3 </span>
        <span id="TextGuess0Char4" type="text"> @g0c4 </span>
    </div>

    <div>
        <span id="TextGuess1Char0" type="text"> @g1c0 </span>
        <span id="TextGuess1Char1" type="text"> @g1c1 </span>
        <span id="TextGuess1Char2" type="text"> @g1c2 </span>
        <span id="TextGuess1Char3" type="text"> @g1c3 </span>
        <span id="TextGuess1Char4" type="text"> @g1c4 </span>
    </div>

    <div>
        <span id="TextGuess2Char0" type="text"> @g2c0 </span>
        <span id="TextGuess2Char1" type="text"> @g2c1 </span>
        <span id="TextGuess2Char2" type="text"> @g2c2 </span>
        <span id="TextGuess2Char3" type="text"> @g2c3 </span>
        <span id="TextGuess2Char4" type="text"> @g2c4 </span>
    </div>

    <div>
        <span id="TextGuess3Char0" type="text"> @g3c0 </span>
        <span id="TextGuess3Char1" type="text"> @g3c1 </span>
        <span id="TextGuess3Char2" type="text"> @g3c2 </span>
        <span id="TextGuess3Char3" type="text"> @g3c3 </span>
        <span id="TextGuess3Char4" type="text"> @g3c4 </span>
    </div>

    <div>
        <span id="TextGuess4Char0" type="text"> @g4c0 </span>
        <span id="TextGuess4Char1" type="text"> @g4c1 </span>
        <span id="TextGuess4Char2" type="text"> @g4c2 </span>
        <span id="TextGuess4Char3" type="text"> @g4c3 </span>
        <span id="TextGuess4Char4" type="text"> @g4c4 </span>
    </div>                 

    <div>
        <span id="TextGuess5Char0" type="text"> @g5c0 </span>
        <span id="TextGuess5Char1" type="text"> @g5c1 </span>
        <span id="TextGuess5Char2" type="text"> @g5c2 </span>
        <span id="TextGuess5Char3" type="text"> @g5c3 </span>
        <span id="TextGuess5Char4" type="text"> @g5c4 </span>
    </div>                 

    <div>
        @foreach (var i in keyboard_toprow)
        {
            var letter = (char)i;
            <button id="keyboard-@i" type="button" @onclick="@(() => KeyboardButtonPressed_Letter(letter))">@letter</button>
        }

        <br />
        @foreach (var i in keyboard_midrow)
        {
            var letter = (char)i;
            <button id="keyboard-@i" type="button" @onclick="@(() => KeyboardButtonPressed_Letter(letter))">@letter</button>
        }

        <br />

        <button id="KeyboardEnter" @onclick="EnterPressed">Enter</button>

        @foreach (var i in keyboard_botrow)
        {
            var letter = (char)i;
            <button id="keyboard-@i" type="button" @onclick="@(() => KeyboardButtonPressed_Letter(letter))">@letter</button>
        }

        <button id="KeyboardBackspace" @onclick="BackspacePressed">Backspace</button>
    </div>
</div>

@code {

    protected ElementReference myDiv;  // set by the @ref attribute

    private ElementReference docRef;
    string KeyPressed = "";
    string guess = "";
    string guessResult = "";

    string g0c0, g0c1, g0c2, g0c3, g0c4,
        g1c0, g1c1, g1c2, g1c3, g1c4,
        g2c0, g2c1, g2c2, g2c3, g2c4,
        g3c0, g3c1, g3c2, g3c3, g3c4,
        g4c0, g4c1, g4c2, g4c3, g4c4,
        g5c0, g5c1, g5c2, g5c3, g5c4;

    int guessRow = 0;
    int guessCol = 0;

    ArrayList attemptedGuesses = new ArrayList();

    int[] keyboard_toprow = new int[] { 113, 119, 101, 114, 116, 121, 117, 105, 111, 112 };
    int[] keyboard_midrow = new int[] { 097, 115, 100, 102, 103, 104, 106, 107, 108 };
    int[] keyboard_botrow = new int[] { 122, 120, 099, 118, 098, 110, 109 };

    WordieGame wordieGame = new WordieGame(1);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await docRef.FocusAsync();
        }
    }

    private async Task KeyboardEventHandler(KeyboardEventArgs args)
    {

        KeyPressed = args.Key;

        if (args.Key.Length == 1 && wordieGame.isPlaying)
        {
            char letter = char.Parse(args.Key);
            bool isLetter = char.IsLetter(letter);

            if (isLetter && guess.Length < 5)
            {
                guess += letter;

                ChangeLetter(letter.ToString());
                if (guessCol < 5)
                {
                    guessCol++;
                }

            }

            Console.WriteLine(guess);
        }


        if (args.Key == "Enter") { await EnterPressed(); }

        if (args.Key == "Backspace") { await BackspacePressed(); }


    }

    protected async Task KeyboardButtonPressed_Letter(char letter)
    {
        KeyPressed = "Key Pressed is " + letter;

        if (guess.Length < 5 && wordieGame.isPlaying)
        {
            guess += letter;

            ChangeLetter(letter.ToString());

            if (guessCol < 5)
            {
                guessCol++;
            }
            Console.WriteLine(guess);
        }

    }

    protected async Task EnterPressed()
    {
        KeyPressed = "Key Pressed is enter from EnterPressed()";

        if (guess.Length == 5 && wordieGame.isPlaying)
        {
            Console.WriteLine("enter: inputting guess");
            wordieGame.makeGuess(guess);

            // display result (temporary)
            guessResult = wordieGame.result;

            if (wordieGame.validGuess)
            {
                attemptedGuesses.Add(guess);

                // reset guess
                guess = "";

                guessRow++;
                guessCol = 0;

                CheckGameState();
            }
        }
    }

    protected async Task CheckGameState()
    {
        if (wordieGame.isCorrect)
        {
            guessResult = "You Won!";
            // todo: set up end screen (win)
        }
        else if (!wordieGame.isPlaying)
        {
            guessResult = "You Lose! The correct word was " + wordieGame.answer;
            // todo: set up end screen (lose)
        }

    }


    protected async Task BackspacePressed()
    {
        KeyPressed = "Key Pressed is backspace from BackspacePressed()";
        if (guess.Length > 0)
        {
            guess = guess.Substring(0, guess.Length - 1);

            guessCol--;

            string letter = "";
            ChangeLetter(letter);

            Console.WriteLine(guess);
        }
    }

    private void ChangeLetter(string letter)
    {
        switch (guessRow)
        {
            case 0:
                switch (guessCol)
                {
                    case 0:
                        g0c0 = letter;
                        break;
                    case 1:
                        g0c1 = letter;
                        break;
                    case 2:
                        g0c2 = letter;
                        break;
                    case 3:
                        g0c3 = letter;
                        break;
                    default:
                        g0c4 = letter;
                        break;
                }
                break;

            case 1:
                switch (guessCol)
                {
                    case 0:
                        g1c0 = letter;
                        break;
                    case 1:
                        g1c1 = letter;
                        break;
                    case 2:
                        g1c2 = letter;
                        break;
                    case 3:
                        g1c3 = letter;
                        break;
                    default:
                        g1c4 = letter;
                        break;
                }
                break;

            case 2:
                switch (guessCol)
                {
                    case 0:
                        g2c0 = letter;
                        break;
                    case 1:
                        g2c1 = letter;
                        break;
                    case 2:
                        g2c2 = letter;
                        break;
                    case 3:
                        g2c3 = letter;
                        break;
                    default:
                        g2c4 = letter;
                        break;
                }
                break;

            case 3:
                switch (guessCol)
                {
                    case 0:
                        g3c0 = letter;
                        break;
                    case 1:
                        g3c1 = letter;
                        break;
                    case 2:
                        g3c2 = letter;
                        break;
                    case 3:
                        g3c3 = letter;
                        break;
                    default:
                        g3c4 = letter;
                        break;
                }
                break;

            case 4:
                switch (guessCol)
                {
                    case 0:
                        g4c0 = letter;
                        break;
                    case 1:
                        g4c1 = letter;
                        break;
                    case 2:
                        g4c2 = letter;
                        break;
                    case 3:
                        g4c3 = letter;
                        break;
                    default:
                        g4c4 = letter;
                        break;
                }
                break;

            default:
                switch (guessCol)
                {
                    case 0:
                        g5c0 = letter;
                        break;
                    case 1:
                        g5c1 = letter;
                        break;
                    case 2:
                        g5c2 = letter;
                        break;
                    case 3:
                        g5c3 = letter;
                        break;
                    default:
                        g5c4 = letter;
                        break;
                }
                break;
        }
    }

}