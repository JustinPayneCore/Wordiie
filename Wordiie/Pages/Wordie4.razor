@page "/wordive"

<head>
    <link href="~/css/app.css" rel="stylesheet" />
</head>

<div style="height:100%" class="text-center docRef" tabindex="0" @ref="docRef" @onkeydown=" KeyboardEventHandler ">
    <h1 class="display-4">WordIVe</h1>
    <p id="guessResult">@guessResult</p>

    @*@foreach (var item in attemptedGuesses)
        {
            @item
            <br />
        }*@

    @*<div>
            <span id="TextInputGuess" type="text"> @guess </span>
        </div>*@

    @*<div>
            <p id="Attempt2">_____</p>
            <p id="Attempt3">_____</p>
            <p id="Attempt4">_____</p>
            <p id="Attempt5">_____</p>
            <p id="Attempt6">_____</p>
        </div>*@

    <div>
        <span class="background-letter @classg0c0" id="TextGuess0Char0" type="text"> @g0c0 </span>
        <span class="background-letter @classg0c1" id="TextGuess0Char1" type="text"> @g0c1 </span>
        <span class="background-letter @classg0c2" id="TextGuess0Char2" type="text"> @g0c2 </span>
        <span class="background-letter @classg0c3" id="TextGuess0Char3" type="text"> @g0c3 </span>
        <span class="background-letter @classg0c4" id="TextGuess0Char4" type="text"> @g0c4 </span>
    </div>

    <div>
        <span class="background-letter @classg1c0" id="TextGuess1Char0" type="text"> @g1c0 </span>
        <span class="background-letter @classg1c1" id="TextGuess1Char1" type="text"> @g1c1 </span>
        <span class="background-letter @classg1c2" id="TextGuess1Char2" type="text"> @g1c2 </span>
        <span class="background-letter @classg1c3" id="TextGuess1Char3" type="text"> @g1c3 </span>
        <span class="background-letter @classg1c4" id="TextGuess1Char4" type="text"> @g1c4 </span>
    </div>

    <div>
        <span class="background-letter @classg2c0" id="TextGuess2Char0" type="text"> @g2c0 </span>
        <span class="background-letter @classg2c1" id="TextGuess2Char1" type="text"> @g2c1 </span>
        <span class="background-letter @classg2c2" id="TextGuess2Char2" type="text"> @g2c2 </span>
        <span class="background-letter @classg2c3" id="TextGuess2Char3" type="text"> @g2c3 </span>
        <span class="background-letter @classg2c4" id="TextGuess2Char4" type="text"> @g2c4 </span>
    </div>

    <div>
        <span class="background-letter @classg3c0" id="TextGuess3Char0" type="text"> @g3c0 </span>
        <span class="background-letter @classg3c1" id="TextGuess3Char1" type="text"> @g3c1 </span>
        <span class="background-letter @classg3c2" id="TextGuess3Char2" type="text"> @g3c2 </span>
        <span class="background-letter @classg3c3" id="TextGuess3Char3" type="text"> @g3c3 </span>
        <span class="background-letter @classg3c4" id="TextGuess3Char4" type="text"> @g3c4 </span>
    </div>

    <div>
        <span class="background-letter @classg4c0" id="TextGuess4Char0" type="text"> @g4c0 </span>
        <span class="background-letter @classg4c1" id="TextGuess4Char1" type="text"> @g4c1 </span>
        <span class="background-letter @classg4c2" id="TextGuess4Char2" type="text"> @g4c2 </span>
        <span class="background-letter @classg4c3" id="TextGuess4Char3" type="text"> @g4c3 </span>
        <span class="background-letter @classg4c4" id="TextGuess4Char4" type="text"> @g4c4 </span>
    </div>

    <div>
        <span class="background-letter @classg5c0" id="TextGuess5Char0" type="text"> @g5c0 </span>
        <span class="background-letter @classg5c1" id="TextGuess5Char1" type="text"> @g5c1 </span>
        <span class="background-letter @classg5c2" id="TextGuess5Char2" type="text"> @g5c2 </span>
        <span class="background-letter @classg5c3" id="TextGuess5Char3" type="text"> @g5c3 </span>
        <span class="background-letter @classg5c4" id="TextGuess5Char4" type="text"> @g5c4 </span>
    </div>

    <div>

        @foreach (string letter in keyboard_toprow)
        {
            <button id="keyboard-@letter" type="button" @onclick="@(() => KeyboardButtonPressed_Letter(Convert.ToChar(letter.ToLower())))">@letter</button>
        }

        <br />
        @foreach (string letter in keyboard_midrow)
        {
            <button id="keyboard-@letter" type="button" @onclick="@(() => KeyboardButtonPressed_Letter(Convert.ToChar(letter.ToLower())))">@letter</button>
        }

        <br />

        <button id="KeyboardEnter" @onclick="EnterPressed">Enter</button>

        @foreach (string letter in keyboard_botrow)
        {
            <button id="keyboard-@letter" type="button" @onclick="@(() => KeyboardButtonPressed_Letter(Convert.ToChar(letter.ToLower())))">@letter</button>
        }

        <button id="KeyboardBackspace" @onclick="BackspacePressed">Del</button>
    </div>
</div>

@code {

    @*[Inject]
    public IJSRuntime JS { get; set; }*@

protected ElementReference myDiv;  // set by the @ref attribute

private ElementReference docRef;
string KeyPressed = "";
string guess = "";
string guessResult = "";

string g0c0, g0c1, g0c2, g0c3, g0c4,
    g1c0, g1c1, g1c2, g1c3, g1c4,
    g2c0, g2c1, g2c2, g2c3, g2c4,
    g3c0, g3c1, g3c2, g3c3, g3c4,
    g4c0, g4c1, g4c2, g4c3, g4c4,
    g5c0, g5c1, g5c2, g5c3, g5c4;

string classg0c0 = "background-lightgrey";
string classg0c1 = "background-lightgrey";
string classg0c2 = "background-lightgrey";
string classg0c3 = "background-lightgrey";
string classg0c4 = "background-lightgrey";
string classg1c0 = "background-lightgrey";
string classg1c1 = "background-lightgrey";
string classg1c2 = "background-lightgrey";
string classg1c3 = "background-lightgrey";
string classg1c4 = "background-lightgrey";
string classg2c0 = "background-lightgrey";
string classg2c1 = "background-lightgrey";
string classg2c2 = "background-lightgrey";
string classg2c3 = "background-lightgrey";
string classg2c4 = "background-lightgrey";
string classg3c0 = "background-lightgrey";
string classg3c1 = "background-lightgrey";
string classg3c2 = "background-lightgrey";
string classg3c3 = "background-lightgrey";
string classg3c4 = "background-lightgrey";
string classg4c0 = "background-lightgrey";
string classg4c1 = "background-lightgrey";
string classg4c2 = "background-lightgrey";
string classg4c3 = "background-lightgrey";
string classg4c4 = "background-lightgrey";
string classg5c0 = "background-lightgrey";
string classg5c1 = "background-lightgrey";
string classg5c2 = "background-lightgrey";
string classg5c3 = "background-lightgrey";
string classg5c4 = "background-lightgrey";

int guessRow = 0;
int guessCol = 0;

ArrayList attemptedGuesses = new ArrayList();

string[] keyboard_toprow = new string[] { "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P" };
string[] keyboard_midrow = new string[] { "A", "S", "D", "F", "G", "H", "J", "K", "L" };
string[] keyboard_botrow = new string[] { "Z", "X", "C", "V", "B", "N", "M" };

WordieGame wordieGame = new WordieGame(1);

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await docRef.FocusAsync();
    }
}

private async Task KeyboardEventHandler(KeyboardEventArgs args)
{

    KeyPressed = args.Key;

    if (args.Key.Length == 1 && wordieGame.isPlaying)
    {
        char letter = char.Parse(args.Key);
        bool isLetter = char.IsLetter(letter);

        if (isLetter && guess.Length < 5)
        {
            guess += letter;

            ChangeLetter(letter.ToString().ToUpper());
            if (guessCol < 5)
            {
                guessCol++;
            }

        }

        Console.WriteLine(guess);
    }


    if (args.Key == "Enter") { await EnterPressed(); }

    if (args.Key == "Backspace") { await BackspacePressed(); }


}

protected async Task KeyboardButtonPressed_Letter(char letter)
{
    KeyPressed = "Key Pressed is " + letter;

    if (guess.Length < 5 && wordieGame.isPlaying)
    {
        guess += letter;

        ChangeLetter(letter.ToString().ToUpper());

        if (guessCol < 5)
        {
            guessCol++;
        }
        Console.WriteLine(guess);
    }

}

protected async Task EnterPressed()
{
    KeyPressed = "Key Pressed is enter from EnterPressed()";

    if (guess.Length == 5 && wordieGame.isPlaying)
    {
        Console.WriteLine("enter: inputting guess");
        wordieGame.makeGuess(guess);

        // display result (temporary)
            @*guessResult = wordieGame.result;*@

            if (wordieGame.validGuess)
            {
                attemptedGuesses.Add(guess);

                @*String id = "TextGuess" + guessRow + "Char" + guessCol;*@

                @*var element = await JsRuntime.InvokeAsync<>("document.getElementById", id);*@
            for (int i = 0; i < wordieGame.result.Length; i++)
            {
                ChangeBackground(i);
            }

            // reset guess
            guess = "";

            guessRow++;
            guessCol = 0;

            CheckGameState();
        }
    }
}

protected async Task CheckGameState()
{
    if (wordieGame.isCorrect)
    {
        guessResult = "You Won!";
        // todo: set up end screen (win)
    }
    else if (!wordieGame.isPlaying)
    {
        guessResult = "You Lose! The correct word was " + wordieGame.answer;
        // todo: set up end screen (lose)
    }

}


protected async Task BackspacePressed()
{
    KeyPressed = "Key Pressed is backspace from BackspacePressed()";
    if (guess.Length > 0)
    {
        guess = guess.Substring(0, guess.Length - 1);

        guessCol--;

        string letter = "";
        ChangeLetter(letter);

        Console.WriteLine(guess);
    }
}

private void ChangeBackground(int resultIndex)
{
    string resultLetter = wordieGame.result.Substring(resultIndex, 1); // c, f, or p

    string newClassBackground;

    // change background of each word guess letter
    switch (resultLetter)
    {
        case "c":
            newClassBackground = "background-green";
            break;
        case "p":
            newClassBackground = "background-yellow";
            break;
        default:
            newClassBackground = "background-grey";
            break;
    }

    // change background of keyboard letter
    string keyboard_id = "keyboard-" + resultLetter;

    @*Button keyboard_btn = document.getElementById(keyboard_id);
    keyboard_btn.class = newClassBackground;*@

    Console.WriteLine(resultLetter);
    Console.WriteLine(newClassBackground);


    switch (guessRow)
    {
        case 0:
            switch (resultIndex)
            {
                case 0:
                    classg0c0 = newClassBackground;
                    break;
                case 1:
                    classg0c1 = newClassBackground;
                    break;
                case 2:
                    classg0c2 = newClassBackground;
                    break;
                case 3:
                    classg0c3 = newClassBackground;
                    break;
                default:
                    classg0c4 = newClassBackground;
                    break;
            }
            break;

        case 1:
            switch (resultIndex)
            {
                case 0:
                    classg1c0 = newClassBackground;
                    break;
                case 1:
                    classg1c1 = newClassBackground;
                    break;
                case 2:
                    classg1c2 = newClassBackground;
                    break;
                case 3:
                    classg1c3 = newClassBackground;
                    break;
                default:
                    classg1c4 = newClassBackground;
                    break;
            }
            break;

        case 2:
            switch (resultIndex)
            {
                case 0:
                    classg2c0 = newClassBackground;
                    break;
                case 1:
                    classg2c1 = newClassBackground;
                    break;
                case 2:
                    classg2c2 = newClassBackground;
                    break;
                case 3:
                    classg2c3 = newClassBackground;
                    break;
                default:
                    classg2c4 = newClassBackground;
                    break;
            }
            break;

        case 3:
            switch (resultIndex)
            {
                case 0:
                    classg3c0 = newClassBackground;
                    break;
                case 1:
                    classg3c1 = newClassBackground;
                    break;
                case 2:
                    classg3c2 = newClassBackground;
                    break;
                case 3:
                    classg3c3 = newClassBackground;
                    break;
                default:
                    classg3c4 = newClassBackground;
                    break;
            }
            break;

        case 4:
            switch (resultIndex)
            {
                case 0:
                    classg4c0 = newClassBackground;
                    break;
                case 1:
                    classg4c1 = newClassBackground;
                    break;
                case 2:
                    classg4c2 = newClassBackground;
                    break;
                case 3:
                    classg4c3 = newClassBackground;
                    break;
                default:
                    classg4c4 = newClassBackground;
                    break;
            }
            break;

        default:
            switch (resultIndex)
            {
                case 0:
                    classg5c0 = newClassBackground;
                    break;
                case 1:
                    classg5c1 = newClassBackground;
                    break;
                case 2:
                    classg5c2 = newClassBackground;
                    break;
                case 3:
                    classg5c3 = newClassBackground;
                    break;
                default:
                    classg5c4 = newClassBackground;
                    break;
            }
            break;
    }
}


private void ChangeLetter(string letter)
{
    switch (guessRow)
    {
        case 0:
            switch (guessCol)
            {
                case 0:
                    g0c0 = letter;
                    break;
                case 1:
                    g0c1 = letter;
                    break;
                case 2:
                    g0c2 = letter;
                    break;
                case 3:
                    g0c3 = letter;
                    break;
                default:
                    g0c4 = letter;
                    break;
            }
            break;

        case 1:
            switch (guessCol)
            {
                case 0:
                    g1c0 = letter;
                    break;
                case 1:
                    g1c1 = letter;
                    break;
                case 2:
                    g1c2 = letter;
                    break;
                case 3:
                    g1c3 = letter;
                    break;
                default:
                    g1c4 = letter;
                    break;
            }
            break;

        case 2:
            switch (guessCol)
            {
                case 0:
                    g2c0 = letter;
                    break;
                case 1:
                    g2c1 = letter;
                    break;
                case 2:
                    g2c2 = letter;
                    break;
                case 3:
                    g2c3 = letter;
                    break;
                default:
                    g2c4 = letter;
                    break;
            }
            break;

        case 3:
            switch (guessCol)
            {
                case 0:
                    g3c0 = letter;
                    break;
                case 1:
                    g3c1 = letter;
                    break;
                case 2:
                    g3c2 = letter;
                    break;
                case 3:
                    g3c3 = letter;
                    break;
                default:
                    g3c4 = letter;
                    break;
            }
            break;

        case 4:
            switch (guessCol)
            {
                case 0:
                    g4c0 = letter;
                    break;
                case 1:
                    g4c1 = letter;
                    break;
                case 2:
                    g4c2 = letter;
                    break;
                case 3:
                    g4c3 = letter;
                    break;
                default:
                    g4c4 = letter;
                    break;
            }
            break;

        default:
            switch (guessCol)
            {
                case 0:
                    g5c0 = letter;
                    break;
                case 1:
                    g5c1 = letter;
                    break;
                case 2:
                    g5c2 = letter;
                    break;
                case 3:
                    g5c3 = letter;
                    break;
                default:
                    g5c4 = letter;
                    break;
            }
            break;
    }
}

}